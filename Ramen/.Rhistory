plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
caption = "Note: Error bars indicate 95% CIs,
Dashed line indicates overall mean",
x = "Country",
y = "Average rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01
ggsave(plot_01, filename = paste("plot_01",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
#####
#Plot 2
#####
plot_02 <- ggplot(ranking_style, aes(x=fct_reorder(style, -avg_rating), y=avg_rating)) +
geom_bar(stat="identity", width=.6,fill="steelblue") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme_minimal()+
labs(title="Preferred Ramen Serving Style",
subtitle="(Limited to countries at or above median response threshold; N=11.5)",
x = "Serving Style Category",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 )) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))
plot_02
ggsave(plot_02, filename = paste("plot_02",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
#################
# Maruchan noodles - the old reliables
################
#Which country has the best Maruchan noodles - scatterplot
maruchan <- ramen_ratings %>% filter(brand=="Maruchan") %>%
group_by(country) %>%
summarise(avg_rating = mean(stars),
avg_rating = round(avg_rating,1))
plot_03 <- maruchan %>% ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
geom_bar(stat="identity", width=.75,fill="orange") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme(legend.position = "top") + coord_flip()+
theme_minimal() +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))+
labs(title="Marachun Noodles",
subtitle="Highest Rating by Country",
x = "",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))
plot_03
ggsave(plot_03, filename = paste("plot_03",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
# Get the Data
#Load packages
packages <- c("haven", "ggplot2", "gapminder", "tidyverse", "dplyr", "stringr",
"tidyr", "devtools", "RODBC", "RColorBrewer", "readxl", "reshape2",
"lubridate", "viridis", "haven", "janitor", "wesanderson", "cowplot", "forcats", "ggrepel",
"hrbrthemes", "ggalt", "scales", "corrplot", "sf",
"tigris", "censusapi","tmap", "tidycensus", "mapview","ggmap","lattice","leafpop",
"maps","spData","magick","readxl","writexl","vroom","WriteXLS","openxlsx","fuzzyjoin",
"tidytuesdayR")
# invisible(lapply(packages, install.packages, character.only = TRUE))
invisible(lapply(packages, library, character.only = TRUE))
dir <- "/Users/reginaldferrell/TidyTuesdays/Ramen"
ramen_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv")%>%
na.omit(stars)
############### Key Questions:
# 1. Where are highest ratings for Ramen? (country)
# 2. Which Ramen is the most popular? (style/brand) -- just style
#################
#Number of ratings per country -- (limit by Median)
#Ranking by country - Best
ranking_country <- ramen_ratings %>% mutate(response_count=1) %>%
group_by(country) %>%
summarise(avg_rating = mean(stars),
response_count = sum(response_count),
max = max(stars),
min = min(stars),
sd = sd(stars),
se = sd/sqrt(response_count),
ci = se*1.96) %>% ungroup %>%
#keeping values at the median to limit the data a bit
mutate(median = median(response_count)) %>% filter(response_count >= median) #Just keeping large response counts
#rating_category = ifelse(response_count >= median,"Large Respondent Pool","Low Respondent Pool")) #Respondent
universe <- unique(ranking_country$country)
#Ranking style (filtered to high respondent countries)
ranking_style <- ramen_ratings %>% filter(country %in% universe) %>%
group_by(style) %>%
summarise(avg_rating = mean(stars)) %>%
mutate(avg_rating=round(avg_rating,2))
#####
#Plot 1
#####
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01
ggsave(plot_01, filename = paste("plot_01",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
#####
#Plot 2
#####
plot_02 <- ggplot(ranking_style, aes(x=fct_reorder(style, -avg_rating), y=avg_rating)) +
geom_bar(stat="identity", width=.6,fill="steelblue") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme_minimal()+
labs(title="Preferred Ramen Serving Style",
subtitle="(Limited to countries at or above median response threshold; N=11.5)",
x = "Serving Style Category",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 )) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))
plot_02
ggsave(plot_02, filename = paste("plot_02",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
#################
# Maruchan noodles - the old reliables
################
#Which country has the best Maruchan noodles - scatterplot
maruchan <- ramen_ratings %>% filter(brand=="Maruchan") %>%
group_by(country) %>%
summarise(avg_rating = mean(stars),
avg_rating = round(avg_rating,1))
plot_03 <- maruchan %>% ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
geom_bar(stat="identity", width=.75,fill="orange") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme(legend.position = "top") + coord_flip()+
theme_minimal() +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))+
labs(title="Marachun Noodles",
subtitle="Highest Rating by Country",
x = "",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))
plot_03
ggsave(plot_03, filename = paste("plot_03",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
plot_03 <- maruchan %>% ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
geom_bar(stat="identity", width=.75,fill="orange",
size=1, color="black") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme(legend.position = "top") + coord_flip()+
theme_minimal() +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))+
labs(title="Marachun Noodles",
subtitle="Highest Rating by Country",
x = "",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))
plot_03
#####
plot_02 <- ggplot(ranking_style, aes(x=fct_reorder(style, -avg_rating), y=avg_rating)) +
geom_bar(stat="identity", width=.6,fill="steelblue",size=1, color="black") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme_minimal()+
labs(title="Preferred Ramen Serving Style",
subtitle="(Limited to countries at or above median response threshold; N=11.5)",
x = "Serving Style Category",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 )) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))
plot_02
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01
#####
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating",
fill = "Response Count") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
guide_legend(title="Response Count")+
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
guide_legend(title="Response Count")+
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating",
color = "Response Count") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
#####
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating",
color = "Response Count") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01
# Get the Data
#Load packages
packages <- c("haven", "ggplot2", "gapminder", "tidyverse", "dplyr", "stringr",
"tidyr", "devtools", "RODBC", "RColorBrewer", "readxl", "reshape2",
"lubridate", "viridis", "haven", "janitor", "wesanderson", "cowplot", "forcats", "ggrepel",
"hrbrthemes", "ggalt", "scales", "corrplot", "sf",
"tigris", "censusapi","tmap", "tidycensus", "mapview","ggmap","lattice","leafpop",
"maps","spData","magick","readxl","writexl","vroom","WriteXLS","openxlsx","fuzzyjoin",
"tidytuesdayR")
# invisible(lapply(packages, install.packages, character.only = TRUE))
invisible(lapply(packages, library, character.only = TRUE))
dir <- "/Users/reginaldferrell/TidyTuesdays/Ramen"
ramen_ratings <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-04/ramen_ratings.csv")%>%
na.omit(stars)
############### Key Questions:
# 1. Where are highest ratings for Ramen? (country)
# 2. Which Ramen is the most popular? (style/brand) -- just style
#################
#Number of ratings per country -- (limit by Median)
#Ranking by country - Best
ranking_country <- ramen_ratings %>% mutate(response_count=1) %>%
group_by(country) %>%
summarise(avg_rating = mean(stars),
response_count = sum(response_count),
max = max(stars),
min = min(stars),
sd = sd(stars),
se = sd/sqrt(response_count),
ci = se*1.96) %>% ungroup %>%
#keeping values at the median to limit the data a bit
mutate(median = median(response_count)) %>% filter(response_count >= median) #Just keeping large response counts
#rating_category = ifelse(response_count >= median,"Large Respondent Pool","Low Respondent Pool")) #Respondent
universe <- unique(ranking_country$country)
#Ranking style (filtered to high respondent countries)
ranking_style <- ramen_ratings %>% filter(country %in% universe) %>%
group_by(style) %>%
summarise(avg_rating = mean(stars)) %>%
mutate(avg_rating=round(avg_rating,2))
#####
#Plot 1
#####
plot_01 <- ranking_country %>%
ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
theme_minimal()+
geom_hline(aes(yintercept = mean(ramen_ratings$stars, na.rm = TRUE)),
linetype = "dashed") +
geom_errorbar(aes(ymin = avg_rating - ci, ymax = avg_rating + ci, color = response_count),
width = .2, size = .75) +
geom_point(aes(color = response_count), size = 4) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5)) +
labs(title = "Ramen Ranking by Country",
subtitle = "(Limited to countries at or above median response threshold; N=11.5)",
x = "Country",
y = "Average rating",
color = "Response Count") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))+
coord_flip()
plot_01
ggsave(plot_01, filename = paste("plot_01",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
#####
#Plot 2
#####
plot_02 <- ggplot(ranking_style, aes(x=fct_reorder(style, -avg_rating), y=avg_rating)) +
geom_bar(stat="identity", width=.6,fill="steelblue",size=1, color="black") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme_minimal()+
labs(title="Preferred Ramen Serving Style",
subtitle="(Limited to countries at or above median response threshold; N=11.5)",
x = "Serving Style Category",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 )) +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))
plot_02
ggsave(plot_02, filename = paste("plot_02",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
#################
# Maruchan noodles - the old reliables
################
#Which country has the best Maruchan noodles - scatterplot
maruchan <- ramen_ratings %>% filter(brand=="Maruchan") %>%
group_by(country) %>%
summarise(avg_rating = mean(stars),
avg_rating = round(avg_rating,1))
plot_03 <- maruchan %>% ggplot(aes(x = fct_reorder(country, avg_rating), y = avg_rating)) +
geom_bar(stat="identity", width=.75,fill="orange",
size=1, color="black") +
geom_text(aes(label=avg_rating),
position = position_stack(vjust = 1.05))+
theme(legend.position = "top") + coord_flip()+
theme_minimal() +
scale_y_continuous(limits=c(0, 5), breaks=c(0,1,2,3,4,5))+
labs(title="Marachun Noodles",
subtitle="Highest Rating by Country",
x = "",
y = "Average Rating") +
theme(plot.title = element_text(face="bold",hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5 ))
plot_03
ggsave(plot_03, filename = paste("plot_03",".png",sep = "")
, width = 8
, height = 8
, type = "cairo-png")
# Get the Data
#Load packages
packages <- c("haven", "ggplot2", "gapminder", "tidyverse", "dplyr", "stringr",
"tidyr", "devtools", "RODBC", "RColorBrewer", "foreign", "knitr", "markdown",
"rmarkdown", "tinytex", "kableExtra", "stargazer", "xtable", "readxl", "tidyr", "reshape2",
"lubridate", "viridis", "haven", "janitor", "wesanderson", "cowplot", "forcats", "ggrepel",
"hrbrthemes", "ggalt", "scales", "psych", "corrplot", "gtools", "gapminder", "sf",
"tigris", "censusapi","tmap", "tidycensus", "mapview","ggmap","lattice","leafpop",
"maps","spData","magick","readxl","writexl","vroom","WriteXLS","openxlsx","fuzzyjoin",
"tidytuesdayR")
invisible(lapply(packages, library, character.only = TRUE))
# Get the Data
passwords <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-14/passwords.csv')
# Or read in with tidytuesdayR package (https://github.com/thebioengineer/tidytuesdayR)
# PLEASE NOTE TO USE 2020 DATA YOU NEED TO UPDATE tidytuesdayR from GitHub
# Either ISO-8601 date or year/week works!
# Install via devtools::install_github("thebioengineer/tidytuesdayR")
tuesdata <- tidytuesdayR::tt_load('2020-01-14')
tuesdata <- tidytuesdayR::tt_load(2020, week = 3)
password_pop <- passwords %>% group_by(category, time_unit) %>%
summarise(avg_value=mean(value))
View(password_pop)
time_password <- passwords %>%
# filter(time_unit == "days") %>%
group_by(category,strength,time_unit) %>%
summarise(avg_value=mean(value))
View(time_password)
View(passwords)
# Get the Data
#Load packages
packages <- c("haven", "ggplot2", "gapminder", "tidyverse", "dplyr", "stringr",
"tidyr", "devtools", "RODBC", "RColorBrewer", "foreign", "knitr", "markdown",
"rmarkdown", "tinytex", "kableExtra", "stargazer", "xtable", "readxl", "tidyr", "reshape2",
"lubridate", "viridis", "haven", "janitor", "wesanderson", "cowplot", "forcats", "ggrepel",
"hrbrthemes", "ggalt", "scales", "psych", "corrplot", "gtools", "gapminder", "sf",
"tigris", "censusapi","tmap", "tidycensus", "mapview","ggmap","lattice","leafpop",
"maps","spData","magick","readxl","writexl","vroom","WriteXLS","openxlsx","fuzzyjoin",
"tidytuesdayR")
# invisible(lapply(packages, install.packages, character.only = TRUE))
invisible(lapply(packages, library, character.only = TRUE))
# Read in with tidytuesdayR package
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest
# Either ISO-8601 date or year/week works!
tuesdata <- tidytuesdayR::tt_load('2021-02-09')
tuesdata <- tidytuesdayR::tt_load(2021, week = 7)
lifetime_earn <- tuesdata$lifetime_earn
# Or read in the data manually
lifetime_earn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/lifetime_earn.csv')
student_debt <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/student_debt.csv')
retirement <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/retirement.csv')
home_owner <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/home_owner.csv')
race_wealth <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/race_wealth.csv')
income_time <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/income_time.csv')
income_limits <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/income_limits.csv')
income_aggregate <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/income_aggregate.csv')
income_distribution <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/income_distribution.csv')
income_mean <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/income_mean.csv')
time_studentdebt <- student_debt %>% group_by(year) %>% summarise(avg_debt = sum(loan_debt))
race_studentdebt <- student_debt %>% group_by(year,race) %>% summarise(avg_debt = sum(loan_debt))
View(time_studentdebt)
View(race_studentdebt)
time_studentdebt <- student_debt %>% group_by(year) %>%
summarise(avg_debt = sum(loan_debt)) %>%
ggplot(aes(x=date)) +
geom_line(aes(y=avg_debt)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %")
time_studentdebt
time_studentdebt <- student_debt %>% group_by(year) %>%
summarise(avg_debt = sum(loan_debt)) %>%
ggplot(aes(x=year)) +
geom_line(aes(y=avg_debt)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %")
time_studentdebt
time_studentdebt
time_studentdebt <- student_debt %>% group_by(year) %>%
summarise(avg_debt = sum(loan_debt))
time_studentdebt <- student_debt %>% group_by(year) %>%
summarise(avg_debt = sum(loan_debt)) %>%
ggplot(aes(x=year)) +
geom_line(aes(y=avg_debt)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %")
time_studentdebt
view(time_studentdebt)
time_studentdebt <- student_debt %>% group_by(year) %>%
summarise(avg_debt = sum(loan_debt)) %>%
ggplot(aes(x=year)) +
geom_line(aes(y=avg_debt)) +
labs(title="Monthly Time Series",
subtitle="Returns Percentage from Economics Dataset",
caption="Source: Economics",
y="Returns %")
view(time_studentdebt)
time_studentdebt <- student_debt %>% group_by(year) %>%
summarise(avg_debt = sum(loan_debt))
ggplot(time_studentdebt, aes(x=year)) +
geom_line(aes(y=avg_debt))
