/// <reference types="ws" />
import { HttpgdBackend, HttpgdStateResponse, HttpgdPlotsResponse, HttpgdRenderersResponse, HttpgdPlotRequest, HttpgdRemoveRequest, HttpgdInfoResponse } from './types';
import WebSocket from 'isomorphic-ws';
import { fetch } from 'cross-fetch';
/**
 * Get WebSocket URL.
 *
 * @param b Httpgd backend
 * @returns URL string
 */
export declare function url_websocket(b: HttpgdBackend): string;
/**
 * Creates a new WebSocket connection to an httpgd instance.
 *
 * @param b Httpgd backend
 * @returns WebSocket connection object
 */
export declare function new_websocket(b: HttpgdBackend): WebSocket;
/**
 * Get the URL of the `/state` API.
 *
 * @param b Httpgd backend
 * @returns URL string
 */
export declare function url_state(b: HttpgdBackend): string;
/**
 * Sends a GET-request to the `/state` API.
 *
 * @param b Httpgd backend
 * @returns Response promise
 */
export declare function fetch_state(b: HttpgdBackend): Promise<HttpgdStateResponse>;
/**
 * Get the URL of the `/info` API.
 *
 * @param b Httpgd backend
 * @returns URL string
 */
export declare function url_info(b: HttpgdBackend): string;
/**
 * Sends a GET-request to the `/info` API.
 *
 * @param b Httpgd backend
 * @returns Response promise
 */
export declare function fetch_info(b: HttpgdBackend): Promise<HttpgdInfoResponse>;
/**
 * Get the URL of the `/clear` API.
 *
 * @param b Httpgd backend
 * @returns URL string
 */
export declare function url_clear(b: HttpgdBackend): string;
/**
 * Sends a GET-request to the `/clear` API.
 *
 * @param b Httpgd backend
 * @returns Response promise
 */
export declare function fetch_clear(b: HttpgdBackend): Promise<HttpgdStateResponse>;
/**
 * Get the URL of the `/renderers` API.
 *
 * @param b Httpgd backend
 * @returns URL string
 */
export declare function url_renderers(b: HttpgdBackend): string;
/**
 * Sends a GET-request to the `/clear` API.
 *
 * @param b Httpgd backend
 * @returns Response promise
 */
export declare function fetch_renderers(b: HttpgdBackend): Promise<HttpgdRenderersResponse>;
/**
 * Get the URL of the `/plots` API.
 *
 * @param b Httpgd backend
 * @returns URL string
 */
export declare function url_plots(b: HttpgdBackend): string;
/**
 * Sends a GET-request to the `/plots` API.
 *
 * @param b Httpgd backend
 * @returns Response promise
 */
export declare function fetch_plots(b: HttpgdBackend): Promise<HttpgdPlotsResponse>;
/**
 * Get the URL of the `/plot` API.
 *
 * @param b Httpgd backend
 * @param r Plot request object
 * @param includeToken In some cases token needs to be included in query params
 *   because request headers can't be set (e.g. img.src).
 * @param cachestr Convenience parameter will be added to the url as
 *   &c={cachestr} to circumvent caching.
 * @returns URL string
 */
export declare function url_plot(b: HttpgdBackend, r: HttpgdPlotRequest, includeToken?: boolean, cachestr?: string): string;
/**
 * Sends a GET-request to the `/plot` API.
 *
 * @param b Httpgd backend
 * @param r Plot request object
 * @returns Response promise
 */
export declare function fetch_plot(b: HttpgdBackend, r: HttpgdPlotRequest): ReturnType<typeof fetch>;
/**
 * Get the URL of the `/remove` API.
 *
 * @param b Httpgd backend
 * @param r Remove request object
 * @returns URL string
 */
export declare function url_remove(b: HttpgdBackend, r: HttpgdRemoveRequest): string;
/**
 * Sends a GET-request to the `/remove` API.
 *
 * @param b Httpgd backend
 * @param r Remove request object
 * @returns Response promise
 */
export declare function fetch_remove(b: HttpgdBackend, r: HttpgdRemoveRequest): Promise<HttpgdStateResponse>;
