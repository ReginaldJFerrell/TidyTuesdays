import { HttpgdBackend, HttpgdStateResponse } from './types';
/**
 * Connection mode.
 */
export declare const enum HttpgdConnectionMode {
    NONE = 0,
    POLL = 1,
    SLOWPOLL = 2,
    WEBSOCKET = 3
}
/**
 * Handles HTTP and WebSocket connection to httpgd server.
 *
 * Will automatically fall back to HTTP polling if WebSocket is unavailable and
 * uses a slow polling mode to eventually reconnect when the server becomes
 * completely unavailable.
 */
export declare class HttpgdConnection {
    private static readonly INTERVAL_POLL;
    private static readonly INTERVAL_POLL_SLOW;
    /**
     * Httpgd backend
     */
    backend: HttpgdBackend;
    private mode;
    private allowWebsockets;
    private socket?;
    private pollHandle?;
    private pausePoll;
    private disconnected;
    private lastState?;
    private remoteStateChanged;
    private connectionChanged;
    /**
     * Setup connection.
     *
     * Note that HttpgdConnection.open() has to be called after to open the connection.
     *
     * @param backend Httpgd backend
     * @param allowWebsockets Allow WebSocket connection.
     */
    constructor(backend: HttpgdBackend, allowWebsockets?: boolean);
    /**
     * Open connection and start listening for remote changes.
     */
    open(): void;
    /**
     * Close connection and stop listening for remote changes.
     */
    close(): void;
    private start;
    private clearPoll;
    private clearWebsocket;
    private poll;
    private onWsMessage;
    private onWsClose;
    private onWsOpen;
    private setDisconnected;
    private checkState;
    /**
     * Listen to server state (plot or device active status) changes.
     *
     * @param fun
     */
    onRemoteChanged(fun: (newState: HttpgdStateResponse, oldState?: HttpgdStateResponse) => void): void;
    /**
     * Listen to connection changes.
     *
     * @param fun
     */
    onConnectionChanged(fun: (newState: boolean, oldState?: boolean) => void): void;
}
